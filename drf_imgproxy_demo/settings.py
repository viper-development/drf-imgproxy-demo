"""
Django settings for drf_imgproxy_demo project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Setup configuration scheme
env = environ.Env(
    DEBUG=(bool, False),
    S3_ENABLED=(bool, False),
    S3_USE_SSL=(bool, True)
)

# Read .env file
environ.Env.read_env()

SECRET_KEY = env('SECRET_KEY')

DEBUG = env('DEBUG')

# Allow all hosts
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_imgproxy',
    'demo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drf_imgproxy_demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_imgproxy_demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': env.db()
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Media files

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "files"
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

if env('S3_ENABLED'):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_S3_REGION_NAME = env('S3_REGION_NAME', default='us-east-1')
    AWS_S3_USE_SSL = env('S3_USE_SSL')
    AWS_S3_ENDPOINT_URL = env('S3_ENDPOINT_URL', default=None)

    AWS_ACCESS_KEY_ID = env('S3_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY = env('S3_SECRET_KEY')
    AWS_STORAGE_BUCKET_NAME = env('S3_BUCKET_NAME')

    AWS_AUTO_CREATE_BUCKET = True
    AWS_QUERYSTRING_AUTH = False


# Django REST framework

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': ('rest_framework.pagination.'
                                 'PageNumberPagination'),
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}


# imgproxy

IMGPROXY_PROTOCOL = env('IMGPROXY_PROTOCOL')
IMGPROXY_BUCKET_NAME = env('IMGPROXY_BUCKET_NAME')

IMGPROXY_KEY = env('IMGPROXY_KEY')
IMGPROXY_SALT = env('IMGPROXY_SALT')

IMGPROXY_HOST = env('IMGPROXY_HOST')

IMGPROXY_RESOLUTIONS = (
    (640,  480),
    (800,  600),
    (1024, 768),
)
